{"componentChunkName":"component---src-components-tutorials-js","path":"/tutorials/time-input/","result":{"data":{"markdownRemark":{"html":"<h2>Contents</h2>\n<ol>\n<li><a href=\"#about\">Why would I need this</a></li>\n<li>\n<p><a href=\"#work\">How does this shiny app work?</a></p>\n<ol>\n<li><a href=\"#work-build\">Building the time input component</a></li>\n<li><a href=\"#work-js\">Writing the shiny input binding</a></li>\n</ol>\n</li>\n<li><a href=\"#further-thoughts\">What do I need to know before I implement this into my own project?</a></li>\n<li><a href=\"#run\">How do I run the demo?</a></li>\n</ol>\n<!-- endexcerpt -->\n<span id=\"about\" />\n<h2>Why would I need this?</h2>\n<p>In the shiny framework, there are a lot of UI components that are easy to use and to fit with your data. If your data contains time values that may play a big role in the interactivity of your application, you would want a time input element that allows uses to filter data by a time or by a period of time. You may notice that a time input element does not exist in the shiny framework as a <a href=\"https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/\">shiny control widget</a>.</p>\n<p>This is not a problem as it is possible to create your own using <a href=\"https://shiny.rstudio.com/articles/js-custom-input.html\">Shiny Input Bindings</a>. In this tutorial, I will cover how to structure the HTML element and write the JavaScript input bindings.</p>\n<blockquote>\n<p>It is important to note that not all browsers widely support input[type='time']. See <a href=\"https://caniuse.com/#feat=input-datetime\">Can I Use: date and time inputs</a> page for more information. The purpose of this example is to demonstrate how to create custom input components and Shiny input bindings.</p>\n</blockquote>\n<span id=\"work\" />\n<h2>How does this shiny app work?</h2>\n<p>In this tutorial, I will focus on the following steps to get the component working.</p>\n<ol>\n<li>Building the time input component</li>\n<li>Writing the shiny input binding</li>\n</ol>\n<p>See the <a href=\"https://github.com/davidruvolo51/shinyAppTutorials/tree/master/time-input\">GitHub repository</a> for the complete code.</p>\n<span id=\"work-build\" />\n<h3>Building the time input component</h3>\n<p>To create the input element, we will use the HTML element <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\">input</a>. There are many input types available, but we are only interested in the type <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time\">time</a>.  We will stick with the basic attributes: <code>id</code>, <code>name</code>, <code>class</code>, <code>value</code>, <code>min</code>, and <code>max</code> attributes.</p>\n<p>In shiny, the <code>&#x3C;input></code> element can be accessed using <code>tags$input()</code>. All inputs must have an accompanying label (<code>&#x3C;label></code>; <code>tags$label</code>) that is linked with the input using the <code>for</code> attribute. The value of <code>for</code> should be the id of the input element. </p>\n<p>In addition to the label element, you may need to a caption to provide addition notes about the time input. This argument will be optional. If it is used, then content should be placed inside the label element.</p>\n<p>Here is the time input component.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">time_input <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>inputId<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"13:00\"</span><span class=\"token punctuation\">,</span> min <span class=\"token operator\">=</span> <span class=\"token string\">\"07:00\"</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token string\">\"10:00\"</span><span class=\"token punctuation\">,</span> caption <span class=\"token operator\">=</span> <span class=\"token keyword\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\"># &lt;label /></span>\n    lab <span class=\"token operator\">&lt;-</span> shiny<span class=\"token operator\">::</span>tags<span class=\"token operator\">$</span>label<span class=\"token punctuation\">(</span>\n        class <span class=\"token operator\">=</span> <span class=\"token string\">\"time__label\"</span><span class=\"token punctuation\">,</span>\n        `<span class=\"token keyword\">for</span>` <span class=\"token operator\">=</span> inputId<span class=\"token punctuation\">,</span>\n        label\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># if present, append caption to &lt;label></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>is.null<span class=\"token punctuation\">(</span>caption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lab<span class=\"token operator\">$</span>children <span class=\"token operator\">&lt;-</span> shiny<span class=\"token operator\">::</span>tagList<span class=\"token punctuation\">(</span>\n            lab<span class=\"token operator\">$</span>children<span class=\"token punctuation\">,</span>\n            shiny<span class=\"token operator\">::</span>tags<span class=\"token operator\">$</span>span<span class=\"token punctuation\">(</span>\n                class <span class=\"token operator\">=</span> <span class=\"token string\">\"time__caption\"</span><span class=\"token punctuation\">,</span>\n                caption\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># &lt;input type=\"time\" /></span>\n    input <span class=\"token operator\">&lt;-</span> shiny<span class=\"token operator\">::</span>tags<span class=\"token operator\">$</span>input<span class=\"token punctuation\">(</span>\n        id <span class=\"token operator\">=</span> inputId<span class=\"token punctuation\">,</span>\n        name <span class=\"token operator\">=</span> inputId<span class=\"token punctuation\">,</span>\n        class <span class=\"token operator\">=</span> <span class=\"token string\">\"time__input\"</span><span class=\"token punctuation\">,</span>\n        type <span class=\"token operator\">=</span> <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span>\n        min <span class=\"token operator\">=</span> min<span class=\"token punctuation\">,</span>\n        max <span class=\"token operator\">=</span> max<span class=\"token punctuation\">,</span>\n        value <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># return</span>\n    shiny<span class=\"token operator\">::</span>tagList<span class=\"token punctuation\">(</span>lab<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The attributes <code>min</code> and <code>max</code> can be used to validate the input value. Some browsers may provide some errors natively, but this does not replace robust validation methods and client-side error messages. For more information, see Mozilla's <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time\">time input reference guide</a>.</p>\n<span id=\"work-js\" />\n<h3>Writing the Shiny Input Binding</h3>\n<p>Next, we will create shiny input binding for the time component. I will cover the methods required for this example. For a more detailed description of input bindings, see RStudio's <a href=\"https://shiny.rstudio.com/articles/js-custom-input.html\">Shiny input bindings guide</a>.</p>\n<p>New input bindings can be created using <code>new Shiny.InputBinding()</code>. Use JQuery's <code>extend</code> function to define the methods specific to the component. (It is not possible to write the binding using vanilla JS). Lastly, register input bindings using <code>Shiny.inputBindings.register(...)</code>. Here is the basic structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// create new binding</span>\n<span class=\"token keyword\">var</span> myInput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shiny<span class=\"token punctuation\">.</span>InputBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// extend: define methods</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>myInput<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// register</span>\nShiny<span class=\"token punctuation\">.</span>inputBindings<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>myInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are several methods available for creating custom input bindings. In this example, we will use the following methods.</p>\n<ul>\n<li><code>find</code>: (required) this method is used to locate the time component within the web document</li>\n<li><code>initialize</code>: this method will run when the component is initialized (i.e., rendered). This is also useful for setting the initial value of the component (otherwise, the starting value will be <code>NULL</code>).</li>\n<li><code>getValue</code>: <code>getValue</code> returns the value of the time input component so it can be accessed in the Shiny server using <code>input$some_id</code>.</li>\n<li><code>subscribe</code>: this is used for attaching events to the time component (i.e., <code>click</code>, <code>change</code>, etc.). Depending on the event(s), you may want to use the <code>callback()</code> function. Doing so will run the <code>getValue</code> method.</li>\n</ul>\n<p>Here is the input binding for the time component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// init new binding</span>\n<span class=\"token keyword\">var</span> timeInput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shiny<span class=\"token punctuation\">.</span>InputBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// extend class</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>timeInput<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// locate all instances of input[type='time']</span>\n    <span class=\"token function-variable function\">find</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".time__input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// return default value defined by the attribute `value`</span>\n    <span class=\"token comment\">// this will also reset the input to it's default value</span>\n    <span class=\"token comment\">// on page refresh</span>\n    <span class=\"token function-variable function\">initialize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// callback function: when called, return the current input value</span>\n    <span class=\"token function-variable function\">getValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// events: when input is changed, return the value</span>\n    <span class=\"token function-variable function\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\">// callback; i.e., run `getValue`</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// register</span>\nShiny<span class=\"token punctuation\">.</span>inputBindings<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>timeInput<span class=\"token punctuation\">)</span></code></pre></div>\n<span id=\"further-thoughts\" />\n<h2>What do I need to know before I implement this into my own project?</h2>\n<p>Creating custom input components is fairly straightforward. There are a couple of things that you should consider before implementing this method into your application.</p>\n<p>To follow good semantic HTML and web accessibility practices, input components should be wrapped in a <code>form</code> element: <code>tags$form(...)</code>. Include a title for that describes the form using the legend element: <code>tags$legend()</code>. For accessibility, make sure the legend is linked with the form element using <code>aria-labelledby</code> and reference the id of the legend.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">tags<span class=\"token operator\">$</span>form<span class=\"token punctuation\">(</span>`aria<span class=\"token operator\">-</span>labelledby`<span class=\"token operator\">=</span><span class=\"token string\">\"form-time-legend\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\"># form legend</span>\n    tags<span class=\"token operator\">$</span>legend<span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token string\">\"form-time-legend\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"My title for the form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\"># time input</span>\n    time_input<span class=\"token punctuation\">(</span><span class=\"token ellipsis\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\"># other inputs if applicable</span>\n    <span class=\"token ellipsis\">...</span>\n\n    <span class=\"token comment\"># submit</span>\n    tags<span class=\"token operator\">$</span>button<span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">,</span> class<span class=\"token operator\">=</span><span class=\"token string\">\"action-button shiny-bound-input\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Enter\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It is important to point out that the input, by default, returns time in the 24-hour format. If you would like the component to return 12-hour format, than you can restructure the <code>initialize</code> and <code>getValue</code> methods to the following. Alternately, you can use R to convert the times from 24-hour to 12-hour format.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// method now calls `getValue`</span>\n<span class=\"token function-variable function\">intialize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// method: returns time in 12-hour format</span>\n<span class=\"token function-variable function\">getValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>valueAsDate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-us\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> hour<span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span><span class=\"token punctuation\">,</span> minute<span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2>How do I run the demo?</h2>\n<p>The code for the shiny application can be found on <a href=\"https://github.com/davidruvolo51/shinyAppTutorials/tree/master/time-input\">GitHub</a>. Either clone the repository and run the app in locally or you can run the application by running the following code in the console. </p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">shiny<span class=\"token operator\">::</span>runApp<span class=\"token punctuation\">(</span>\n    repo <span class=\"token operator\">=</span> <span class=\"token string\">\"shinyAppTutorials\"</span><span class=\"token punctuation\">,</span>\n    username <span class=\"token operator\">=</span> <span class=\"token string\">\"davidruvolo51\"</span><span class=\"token punctuation\">,</span>\n    subdir <span class=\"token operator\">=</span> <span class=\"token string\">\"time-input\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Creating Custom Inputs","subtitle":"Getting started with Shiny Input Bindings: making a time input component","abstract":"There isn't a time input in the shiny framework. A time input element is useful for data entry shiny apps or if you need to filter data by hour or minute. In this example, learn how to create a custom time input component using Shiny input bindings.","date":"2019-11-25","updated":"2020-08-01","keywords":["javascript"]},"fields":{"readingTime":{"minutes":5.765}}}},"pageContext":{"slug":"/tutorials/time-input/"}}}